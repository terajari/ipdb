// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/podcasts.go

// Package datamock is a generated GoMock package.
package datamock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/terajari/ipdb/internal/data"
)

// MockIPodcast is a mock of IPodcast interface.
type MockIPodcast struct {
	ctrl     *gomock.Controller
	recorder *MockIPodcastMockRecorder
}

// MockIPodcastMockRecorder is the mock recorder for MockIPodcast.
type MockIPodcastMockRecorder struct {
	mock *MockIPodcast
}

// NewMockIPodcast creates a new mock instance.
func NewMockIPodcast(ctrl *gomock.Controller) *MockIPodcast {
	mock := &MockIPodcast{ctrl: ctrl}
	mock.recorder = &MockIPodcastMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPodcast) EXPECT() *MockIPodcastMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockIPodcast) FindById(arg0 int64) (*data.Podcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*data.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIPodcastMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIPodcast)(nil).FindById), arg0)
}

// GetPodcasts mocks base method.
func (m *MockIPodcast) GetPodcasts() ([]*data.Podcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodcasts")
	ret0, _ := ret[0].([]*data.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodcasts indicates an expected call of GetPodcasts.
func (mr *MockIPodcastMockRecorder) GetPodcasts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodcasts", reflect.TypeOf((*MockIPodcast)(nil).GetPodcasts))
}

// Insert mocks base method.
func (m *MockIPodcast) Insert(arg0 *data.Podcast) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIPodcastMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIPodcast)(nil).Insert), arg0)
}
